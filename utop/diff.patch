--- a/src/lib/uTop.ml
+++ b/src/lib/uTop.ml
@@ -290,6 +290,10 @@ let parse_default parse str eos_is_error =
                  Printf.sprintf "Error: broken invariant in parsetree: %s" s)
       | Syntaxerr.Invalid_package_type (loc, err) ->
           Error ([mkloc loc], UTop_compat.invalid_package_error_to_string err)
+      | Missing_unboxed_literal_suffix loc ->
+          Error ([mkloc loc], "Missing unboxed literal suffix")
+      | Malformed_instance_identifier loc ->
+          Error ([mkloc loc], "Malformed instance identifier")
 #if OCAML_VERSION >= (5, 0, 0)
       | Syntaxerr.Removed_string_set loc ->
           Error ([mkloc loc],
--- a/src/lib/uTop_compat.ml
+++ b/src/lib/uTop_compat.ml
@@ -59,7 +59,7 @@ let toploop_load_file ppf fn =

 (** Returns whether the given path is persistent. *)
 let rec is_persistent_path = function
-  | Path.Pident id -> Ident.persistent id
+  | Path.Pident id -> Ident.is_global_or_predef id
   | Path.Pdot (p, _) -> is_persistent_path p
   | Path.Papply (_, p) -> is_persistent_path p
 #if OCAML_VERSION >= (5, 1, 0)
@@ -92,6 +92,8 @@ let invalid_package_error_to_string err =
         Format.fprintf ppf
           "only module type identifier and %a constraints are supported"
           inline_code "with type"
+    | Misplaced_attribute ->
+        Format.fprintf ppf "misplaced attribute"
   in
   let buf = Buffer.create 128 in
   let fmt = Format.formatter_of_buffer buf in
@@ -110,7 +112,12 @@ module Exp = struct
      pparam_loc=loc;
      pparam_desc=Pparam_val (Nolabel, None, p);
    }] in
-   (Exp.function_ args None (Pfunction_body e))
+   let constraints = {
+     mode_annotations = [];
+     ret_mode_annotations = [];
+     ret_type_constraint = None;
+    } in
+   (Exp.function_ args constraints (Pfunction_body e))
 #else
   let fun_ ~loc p e = Exp.fun_ ~loc Nolabel None p e
 #endif
@@ -150,4 +157,3 @@ let add_cmi_hook f =
     res
   in
   Persistent_env.Persistent_signature.load := load
-
--- a/src/lib/uTop_complete.ml
+++ b/src/lib/uTop_complete.ml
@@ -404,7 +404,8 @@ let add_fields_of_type decl acc =
   match decl.type_kind with
     | Type_variant _ ->
         acc
-    | Type_record (fields, _) ->
+    | Type_record_unboxed_product (fields, _, _)
+    | Type_record (fields, _, _) ->
         List.fold_left (fun acc field -> add (field_name field) acc) acc fields
 #if OCAML_VERSION >= (5, 2, 0)
     | Type_abstract _ ->
@@ -418,12 +419,13 @@ let add_fields_of_type decl acc =
 let add_names_of_type decl acc =
   match decl.type_kind with
 #if OCAML_VERSION >= (4, 13, 0)
-    | Type_variant (constructors, _) ->
+    | Type_variant (constructors, _, _) ->
 #else
     | Type_variant constructors ->
 #endif
         List.fold_left (fun acc cstr -> add (constructor_name cstr) acc) acc constructors
-    | Type_record (fields, _) ->
+    | Type_record_unboxed_product (fields, _, _)
+    | Type_record (fields, _, _) ->
         List.fold_left (fun acc field -> add (field_name field) acc) acc fields
 #if OCAML_VERSION >= (5, 2, 0)
     | Type_abstract _ ->
@@ -531,7 +533,7 @@ let list_global_names () =
     | Env.Env_empty -> acc
     | Env.Env_value_unbound _-> acc
     | Env.Env_module_unbound _-> acc
-    | Env.Env_value(summary, id, _) ->
+    | Env.Env_value(summary, id, _, _) ->
         loop (add (Ident.name id) acc) summary
     | Env.Env_type(summary, id, decl) ->
         loop (add_names_of_type decl (add (Ident.name id) acc)) summary
@@ -585,7 +587,7 @@ let list_global_fields () =
     | Env.Env_empty -> acc
     | Env.Env_value_unbound _-> acc
     | Env.Env_module_unbound _-> acc
-    | Env.Env_value(summary, id, _) ->
+    | Env.Env_value(summary, id, _, _) ->
         loop (add (Ident.name id) acc) summary
     | Env.Env_type(summary, id, decl) ->
         loop (add_fields_of_type decl (add (Ident.name id) acc)) summary
@@ -709,11 +711,11 @@ let rec labels_of_type acc type_expr =
         labels_of_type acc te
     | Tpoly (te, _) ->
         labels_of_type acc te
-    | Tarrow(label, _, te, _) ->
+    | Tarrow((label, _, _), _, te, _) ->
       (match label with
       | Nolabel ->
         labels_of_type acc te
-      | Optional label ->
+      | Position label | Optional label ->
         labels_of_type (String_map.add label Optional acc) te
       | Labelled label ->
         labels_of_type (String_map.add label Required acc) te)
--- a/src/lib/uTop_main.ml
+++ b/src/lib/uTop_main.ml
@@ -337,8 +337,10 @@ end = struct
     let new_cmis = ref [] in
     UTop_compat.add_cmi_hook (fun cmi -> new_cmis := cmi :: !new_cmis );
     fun pp ->
-      List.iter (fun (cmi : Cmi_format.cmi_infos) ->
-        walk_sig pp ~path:(Longident.Lident cmi.cmi_name) cmi.cmi_sign
+      List.iter (fun (cmi : Cmi_format.cmi_infos_lazy) ->
+        let cmi_name = Compilation_unit.Name.to_string cmi.cmi_name in
+        let cmi_sign = Subst.Lazy.force_signature cmi.cmi_sign in
+        walk_sig pp ~path:(Longident.Lident cmi_name) cmi_sign
       ) !new_cmis;
       new_cmis := []

@@ -353,12 +355,16 @@ end = struct
         if path = Path.Pident id then
           walk_mty pp name md_type
       in
+      let scan_compilation_unit env id =
+        let id = Compilation_unit.to_global_ident_for_bytecode id in
+        scan_module env id
+      in
       let rec scan_globals last = function
         | [] -> ()
         | x when x == last -> ()
         | x :: xs ->
           scan_globals last xs;
-          scan_module env x
+          scan_compilation_unit env x
       in
       let rec scan_summary last = function
         | Env.Env_empty -> ()
@@ -370,7 +376,7 @@ end = struct
         | Env.Env_value_unbound (s, _, _)
         | Env.Env_module_unbound (s, _, _)
         | Env.Env_persistent (s, _)
-        | Env.Env_value (s, _, _)
+        | Env.Env_value (s, _, _, _)
         | Env.Env_type (s, _, _)
         | Env.Env_extension (s, _, _)
         | Env.Env_modtype (s, _, _)
@@ -627,7 +633,7 @@ let rewrite_str_item pstr_item tstr_item =
   match pstr_item, tstr_item.Typedtree.str_desc with
     | ({ Parsetree.pstr_desc = Parsetree.Pstr_eval (e, _);
          Parsetree.pstr_loc = loc },
-       Typedtree.Tstr_eval ({ Typedtree.exp_type = typ }, _)) -> begin
+       Typedtree.Tstr_eval ({ Typedtree.exp_type = typ }, _, _)) -> begin
       match rule_of_type typ with
         | Some rule ->
           { Parsetree.pstr_desc = Parsetree.Pstr_eval (rule.rewrite loc e, []);
@@ -1193,7 +1199,13 @@ let typeof sid =
       Some (Printtyp.tree_of_value_description id val_descr)
     with Not_found ->
     try
-      let lbl_desc = Env.find_label_by_name id env in
+      let lbl_desc = Env.find_label_by_name Legacy id env in
+      let (path, ty_decl) = from_type_desc (get_desc lbl_desc.Types.lbl_res) in
+      let id = Ident.create_local (Path.name path) in
+      Some (Printtyp.tree_of_type_declaration id ty_decl Types.Trec_not)
+    with Not_found ->
+    try
+      let lbl_desc = Env.find_label_by_name Unboxed_product id env in
       let (path, ty_decl) = from_type_desc (get_desc lbl_desc.Types.lbl_res) in
       let id = Ident.create_local (Path.name path) in
       Some (Printtyp.tree_of_type_declaration id ty_decl Types.Trec_not)
@@ -1521,8 +1533,9 @@ type value = V : string * _ -> value
 exception Found of Env.t

 let get_required_label name args =
-  match List.find (fun (lab, _) -> lab = Asttypes.Labelled name) args with
-  | _, x -> x
+  match List.find (fun (lab, _) -> lab = Typedtree.Labelled name) args with
+  | _, Typedtree.Omitted _ -> None
+  | _, Typedtree.Arg (x, _) -> Some x
   | exception Not_found -> None

 let walk dir ~init ~f =
@@ -1557,7 +1570,7 @@ let interact ?(search_path=[]) ?(build_dir="_build") ~unit ~loc:(fname, lnum, cn
   let cmt_infos = Cmt_format.read_cmt cmt_fname in
   let expr next (e : Typedtree.expression) =
     match e.exp_desc with
-        | Texp_apply (_, args) -> begin
+        | Texp_apply (_, args, _, _, _) -> begin
             try
               match get_required_label "loc"    args,
                     get_required_label "values" args
